---
title: "Storytelling with Shiny"
editor: 
  markdown: 
    wrap: 72
---

## Introduction

These materials provide an introduction to using R Shiny for data
storytelling. They were prepared for the Mastering Storytelling for
Pharma Data Science Professionals short course at the [Pharmaceutical
Data Science Conference 2024](https://phds.nestat.org/){target="_blank"}
held at University of Connecticut in March 2024.

The materials were prepared by [Jonathan
Tisack](https://www.linkedin.com/in/jtisack){target="_blank"} (BeiGene)
and [Dr. Zhiwei
Yin](https://www.linkedin.com/in/zhiwei-yin-0ba00569/){target="_blank"}
(Bristol Myers Squibb).

### About me

-   Jonathan Tisack, M.S. Mathematics
-   Data Scientist at BeiGene
-   R/Shiny user for over 5 years

### Survey

Rate your experience level with R:

1.  I barely know any R
2.  I know enough R to get around
3.  I know R inside out

Have you used Shiny before?

## Following along during the Course

Several options for running the code during the course:

1.  [Shinylive](https://shinylive.io/r/editor/) is now the easiest way
    to run a simple Shiny app. Simply click the link and Shiny will run
    in your browser alongside a basic editor.

    -   This works using [WebR](https://docs.r-wasm.org/), which is a
        version for R compiled for the browser using WebAssembly. This
        is still in early stages and isn't recommended for production
        use. [Try it here](https://webr.r-wasm.org/latest/).

2.  [RStudio IDE](https://posit.co/products/open-source/rstudio/) is the
    best way to do Shiny development. There are two ways to use it:

    1.  [Download and install](https://posit.co/downloads/) RStudio
        Desktop.
    2.  Run it through your browser with a free [Posit
        Cloud](https://posit.cloud/plans/free) account.

## What is Shiny?

-   **Shiny Basics**

    -   R Shiny is an open source R package that enables easy creation
        of interactive web applications. It is also available for
        Python, but the package ecosystem is far less developed.
    -   Posit (formerly RStudio) created Shiny and continues to lead
        development.
    -   No web development skills required. Shiny generates all the
        HTML, CSS, and JavaScript for the web app.
    -   Basic R proficiency is all that is required to use R Shiny.
    -   Shiny has a very active community of developers. There are many,
        many additional R packages that enhance Shiny.

-   **Use Cases**

    -   Interactive data visualization and exploration. Replace a giant
        PDF of plots with a single app.
    -   Customized report generation. Allow users to generate their own
        reports or tables.
    -   Deploying R scripts for non-technical users. Make a basic
        interface that will allow users to interact with your code.
    -   Make your reports interactive. Shiny can be integrated into
        RMarkdown/Quarto documents. [R/Pharma talk by Max Kuhn on using
        Shinylive in his new
        book.](https://www.youtube.com/watch?v=1mq9YgAEdXU)
    -   Make a front-end interface for a large language model.
    -   Education tools to explain statistical concepts.
    -   [RStudio IDE
        gadgets](https://shiny.posit.co/r/articles/build/gadgets/).

-   **Learning Resources**

    Shiny has been around for 10+ years and there are many learning
    resources available.

    -   [R Shiny Documentation](https://shiny.posit.co/) - Includes
        articles explaining specific topics, as well as a full function
        reference.
    -   [Mastering Shiny book](https://mastering-shiny.org/) - A book by
        Hadley Wickham, freely available online, that covers all Shiny
        features in an approachable manner.
    -   [Shiny Cheat
        Sheet](https://shiny.posit.co/r/articles/start/cheatsheet/)

## Shiny Architecture

### Typical Web App Architecture

![](images/clipboard-1969708342.png)

### Structure of a Shiny App

Typically a shiny app is written in an R file called `app.R`. Within
`app.R` there are three components:

1.  A user interface object, typically named `ui`. This object controls
    the layout of the app.

2.  A `server` function. This function controls the interactive
    component of the app. It is where your typical R code is executed,
    such as code that does data transformations and generates
    visualizations.

3.  A call to the shiny package function `shinyApp()`, which takes the
    `ui` object and `server` function as arguments.

Here is a minimal shiny app:

```{r}
#| code-fold: show
#| eval: false

library(shiny)
ui <- fluidPage(
  "Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
```

## Examples

-   Posit has many examples in the [Shiny
    Gallery](https://shiny.posit.co/r/gallery/)

### Single-file Shiny App Example

-   [Single File Shiny App
    Example](https://shiny.posit.co/r/gallery/start-simple/single-file-shiny-app/)
    ([Open in Shinylive
    editor](https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAYgAIBxAGyICMpHaA3KAJwEsoLRnADOtAlAi0A5kVoALODzgAdCFIA8AWloAmAAz61xiHQAicAGZ8IcWqUW0AqgEk1AVz61ttFkSKkIqQ8aAAKUNJwABRqtLQQ7vD8BC4QqO6kUQDkEFm4tFkAcoksSrREluUsInnxAJS4sbSozKQA8hnpmVktAVl1agMQJuZWNnYOdiJKnGXEACaqENM8szzeOpbuEASkfCRRNl35RJ0ZdbQgTaekXQAkvaQbtMoQizyhrVFXUnEKfEEojxtnxLIc0hk7hA6kM4gBfIZwka0LBwUjuHhSKC0ADK8hsAE9aGhUFUAFZwXZqET4iAEgCC6CinloAF5aJ58is1mzaNylHUwHCALpAA))

    ```{r}
    #| echo: true
    #| eval: false
    #| code-fold: true
    library(shiny)

    # Global variables can go here
    n <- 200

    # Define the UI
    ui <- bootstrapPage(
      numericInput('n', 'Number of obs', n),
      plotOutput('plot')
    )


    # Define the server code
    server <- function(input, output) {
      output$plot <- renderPlot({
        hist(runif(input$n))
      })
    }

    # Return a Shiny app object
    shinyApp(ui = ui, server = server)
    ```

### K-Means Clustering Example

-   [K-Means Clustering
    Example](https://shiny.posit.co/r/gallery/start-simple/kmeans-example/)
    ([Open in Shinylive
    editor](https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IIgMQACANYBaeFAicJJaqwkB3IoylL1tUtwkQArvEa0CUahIBuLWlHrU4nXOImciEgCYkA5KQSAOa0NnASBuHGnHCMEdzhRKiktCQRXjHOBKTuUBKW5EFaFla29o7OInaMSgA8Mh5wpN60AGat7NDwnOy05pwCuBJCYADKqHAEtC4jwqImtBL1EqhQQXAA6vrco7TecPQs7CISEglQ+4wACgpw1Ox+AJL90nJwCkoE1NHk5hBBfkGJw8ewOLBuEDuxwgp1OmUmpEeEFQxlIDwAHsRqH4hn4ABoSABq5SccBxZRqQJhsPh2SRKLRflYWPJfgAmkSSc5ydVXI0suRvBIALwUzjAYAAJgAutKqbCjKZYhZ6aiHl8frFOKyAMLfTi-fJEYxkckAZiGMD4IokAEZLVB0TaAJxzU7yiQwKB8CFQ4GnVDUIikADyqIZD0DwdtgOBczmIhEMUYYTiy1aJuyqQgvWRqKGxtIDKGMU4nGzAgkIET1MkOqIMHofHCkX5CLgQuqDlJSj4pC8eUh6h8UFIeVazHgwNpgoAIqO8stGO8s2F2NXqac+rRxUMCLmGQASTFEahDPhH5mngTS4EAXwT1I1Bq1Sway6gq7g6-90nkii4O5228ecx3YQYJAvVFD2fX4BnvR9TkLI8o1IW03wkZcIEuK4gzRDcFVWZxSHIdh9xGMQAFEABZbQAQVtHURiGCizQAdjYyiACEAA5mOGMAxGo2c6IAMWouj+Io50eOoyi6LNZjf1OCjRNEtjRIABk0qTBLUtSzUUvABLEOiADYAFYzMlPjjNUtieNtLjRN0sRnXcjzZkQ2FVkYdgvTiUV9wsjB7QkajQqGTShltAQ3R8vDAIFDtQKgcC3E3BVTixG1YK1cCYP1X4MqywiCEMUVJWi-I4CdUUzXigMiD7Ho8pqAqCAoOChlQcqbWovdav6oZqHUIVRWo+KHxrO8azrD9yAkUZeH4CQ0FQCQZC2mQkxW1g6PQdhjEWUVjpLWJUxtZNUzmMA72lIA))

```{r}
#| echo: true
#| eval: false
#| code-fold: true
library(shiny)

# k-means only works with numerical variables,
# so don't give the user the option to select
# a categorical variable
vars <- setdiff(names(iris), "Species")

ui <- pageWithSidebar(
  headerPanel('Iris k-means clustering'),
  sidebarPanel(
    selectInput('xcol', 'X Variable', vars),
    selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),
    numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
  ),
  mainPanel(
    plotOutput('plot1')
  )
)

server <- function(input, output, session) {

  # Combine the selected variables into a new data frame
  selectedData <- reactive({
    iris[, c(input$xcol, input$ycol)]
  })

  clusters <- reactive({
    kmeans(selectedData(), input$clusters)
  })

  output$plot1 <- renderPlot({
    palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
      "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))

    par(mar = c(5.1, 4.1, 0, 1))
    plot(selectedData(),
         col = clusters()$cluster,
         pch = 20, cex = 3)
    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
  })

}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

## User Interface

-   The UI is mainly composed of **inputs** and **outputs**.

-   **Inputs** are widgets that get input from the user

    ![](images/clipboard-1862809380.png)

-   **Outputs** are placeholders that are later filled in by the
    `server` function. Each output has a corresponding render function
    in the `server`.

    ![](images/clipboard-235306912.png)

### The user interface is static

Code in the user interface is only run once. To illustrate this, try
inspecting the ui object.

::: {.callout-note collapse="true"}
## Structure of a UI object

```{r}
library(shiny)
ui <- fluidPage(
  numericInput('n', 'Number of obs', 100),
  plotOutput('plot')
)
```

```{r}
print(ui)
```

```{r}
str(ui)
```
:::

## Server and Reactivity

-   Shiny server logic is based on a reactive programming paradigm.

-   Reactivity means that when an input changes, all dependent outputs
    are recalculated.

-   Server logic is expressed in the `server(input, output, session)`
    function, which Shiny invokes each time a new *session* starts.

    -   A session starts whenever a user opens the shiny app. A single
        shiny server may run many sessions from different (or the same)
        users.

    -   The parameters of the server function (input, output, session)
        are separate for each session.

-   The three parameters of the `server` function are:

    -   `input`: A read-only list of the inputs defined in the UI, and
        their current values. This is how the server function can use
        the inputs defined in the UI.

    -   `output`: A list of outputs defined in the UI. This is how a
        user defines the app's outputs, and it must always be used with
        a `render` function.

    -   `session`: An optional parameter with a lot of functionality,
        mainly for advanced users. See the
        [documentation](https://shiny.posit.co/r/reference/shiny/latest/session.html)
        for details.

-   Code in the server function is not run linearly, it is **lazy** and
    **reactive**.

    -   **Lazy** means that that it is only run when needed. If a user
        can't see an output on their screen, the code to generate that
        output is not run. If an app has multiple pages/tabs, the code
        for an output isn't run until the user navigates to that tab.

    -   **Reactive** means that when an input is used in the code that
        defines an output, that output takes a **dependency** on the
        input. Whenever a dependency of an output changes, the output
        code will be re-run.

-   This means that the order of code in the server function does not
    matter. Code is run when needed, based on the **reactive graph.**

    -   Examples from [Posit
        Documentation](https://shiny.posit.co/r/articles/build/reactivity-overview/).

    -   A simple reactive graph.

        ```{r}
        #| echo: true
        #| eval: false
        server <- function(input, output) {
          output$distPlot <- renderPlot({
            hist(rnorm(input$obs))
          })
        }
        ```

        ![](images/clipboard-1863259463.png)

    -   A more complex reactive graph. Outputs can depend on any
        combination of inputs. Dependencies can overlap between outputs.

        ```{r}
        #| echo: true
        #| eval: false
        server <- function(input, output) {
          output$plotOut <- renderPlot({
            hist(faithful$eruptions, breaks = as.numeric(input$nBreaks))
            if (input$individualObs)
              rug(faithful$eruptions)
          })

          output$tableOut <- renderTable({
            if (input$individualObs)
              faithful
            else
              NULL
          })
        }
        ```

        ![](images/clipboard-3517538182.png)

    -   A reactive graph with an intermediate reactive expression.

        ```{r}
        #| echo: true
        #| eval: false
        fib <- function(n) ifelse(n<3, 1, fib(n-1)+fib(n-2))

        server <- function(input, output) {
          currentFib         <- reactive({ fib(as.numeric(input$n)) })

          output$nthValue    <- renderText({ currentFib() })
          output$nthValueInv <- renderText({ 1 / currentFib() })
        }
        ```

        ![](images/clipboard-109326790.png)

::: {.callout-note collapse="true"}
#### Reactlog

[Reactlog](https://rstudio.github.io/reactlog/) is an R package that
visualizes the reactive graph for a particular Shiny app session. This
can be very helpful when trying to debug a large app with a lot of
reactivity.

![](images/clipboard-2440969292.png)
:::

## Advanced UI

### Bslib

[bslib](https://rstudio.github.io/bslib/) is a package that expands the
user interface toolkit for Shiny. It is particularly helpful for custom
theming and dashboard design. Think of it like Shiny UI 2.0.

![](images/clipboard-3595974704.png)

::: {.callout-note collapse="true"}
#### Bootstrap

[Bootstrap](https://getbootstrap.com/) is a frontend web framework that
Shiny utilizes when it generates the HTML/CSS/JS from the `ui` object.
Web frameworks like Bootstrap exist so that web developers don't
reinvent the wheel each time they create a new project. You don't need
to know anything about Bootstrap to create a Shiny app, but can be
helpful if you are a user interface perfectionist. By default shiny
utilizes Bootstrap 3, and the bslib package uses Boostrap 5 (the latest
version).
:::

### ShinyUiEditor

[ShinyUiEditor](https://rstudio.github.io/shinyuieditor/) is a package
that launches a low-code tool for building a Shiny UI and generating app
code. You don't actually need to install it to use it, you can launch a
demo through the package website.

### Htmlwidgets

[Htmlwidgets](https://www.htmlwidgets.org/) are R packages that enable
using Javascript visualization libraries in R. Widgets can be used at
the R console and embedded in Shiny apps.

One of the most popular htmlwidget packages to use with Shiny is
[plotly](https://plotly.com/r/getting-started/), which is an R package
based on the plotlyjs web framework for plotting. There is a freely
available book written by the package author Carson Sievert:
[Interactive web-based data visualization with R, plotly, and
shiny](https://plotly-r.com/).

### Many, many other Shiny packages

There are many R packages available that extend Shiny in various ways. A
nice list of the most popular ones is maintained in the Github repo
[nanxstats/awesome-shiny-extensions](https://github.com/nanxstats/awesome-shiny-extensions).

## Deployment

![](images/clipboard-3193985200.png)

### Shiny Server

[Shiny Server](https://posit.co/products/open-source/shinyserver/) is
open source web server software. A single server running Shiny Server
can host many shiny apps.

1.  [Shinyapps.io](https://www.shinyapps.io/) is a managed service that
    runs Shiny Server for you. It's the easiest way to get started
    deploying Shiny apps. Deploying is fast and simple through the
    RStudio IDE. It's free for 25 hours of hosting per month and paid
    tiers allow additional hours.
2.  Host Shiny Server on your own server. This will take some IT support
    or knowledge, but many guides exist or deploying Shiny Server
    yourself.

### Shinylive

Shinylive uses WebR to run a shiny app in the browser. There is no
backend server required.

1.  The technology is still early and many packages don't work.
2.  No server involved. Doesn't work with large data sets.
3.  The R code is run in the browser and therefore the user has access
    to the entire app's source code and data.

Two ways to use shinylive:

-   Create your app on [shinylive.io](https://shinylive.io/r/editor/)
    and use the "Share" button to generate a link to it. All of your
    app's code and other assets will be compressed to a string and
    contained in the generated link. Then simply send this link to a
    user. This is the easiest way to share a Shiny app but it's limited
    to small apps.

-   Use the [shinylive R
    package](https://github.com/posit-dev/r-shinylive) to create and
    host your own static website. This is easy to do in combination with
    the [shinylive quarto
    extension](https://github.com/quarto-ext/shinylive).
