[
  {
    "objectID": "pharmads-2024.html",
    "href": "pharmads-2024.html",
    "title": "Storytelling with Shiny",
    "section": "",
    "text": "These materials provide an introduction to using R Shiny for data storytelling. They were prepared for the Mastering Storytelling for Pharma Data Science Professionals short course at the Pharmaceutical Data Science Conference 2024 held at University of Connecticut in March 2024.\nThe materials were prepared by Jonathan Tisack (BeiGene) and Dr. Zhiwei Yin (Bristol Myers Squibb).\n\n\n\nJonathan Tisack, M.S.\nData Scientist at BeiGene\nR/Shiny user for over 5 years\n\n\n\n\nRate your experience level with R:\n\nI barely know any R\nI know enough R to get around\nI know R inside out\n\nHave you used Shiny before?"
  },
  {
    "objectID": "pharmads-2024.html#introduction",
    "href": "pharmads-2024.html#introduction",
    "title": "Storytelling with Shiny",
    "section": "",
    "text": "These materials provide an introduction to using R Shiny for data storytelling. They were prepared for the Mastering Storytelling for Pharma Data Science Professionals short course at the Pharmaceutical Data Science Conference 2024 held at University of Connecticut in March 2024.\nThe materials were prepared by Jonathan Tisack (BeiGene) and Dr. Zhiwei Yin (Bristol Myers Squibb).\n\n\n\nJonathan Tisack, M.S.\nData Scientist at BeiGene\nR/Shiny user for over 5 years\n\n\n\n\nRate your experience level with R:\n\nI barely know any R\nI know enough R to get around\nI know R inside out\n\nHave you used Shiny before?"
  },
  {
    "objectID": "pharmads-2024.html#following-along-during-the-course",
    "href": "pharmads-2024.html#following-along-during-the-course",
    "title": "Storytelling with Shiny",
    "section": "Following along during the Course",
    "text": "Following along during the Course\nSeveral options for running the code during the course:\n\nShinylive is now the easiest way to run a simple Shiny app. Simply click the link and Shiny will run in your browser alongside a basic editor.\n\nThis works using WebR, which is a version for R compiled for the browser using WebAssembly. This is still in early stages and isn’t recommended for production use. Try it here.\n\nRStudio IDE is the best way to do Shiny development. There are two ways to use it:\n\nDownload and install RStudio Desktop.\nRun it through your browser with a free Posit Cloud account."
  },
  {
    "objectID": "pharmads-2024.html#what-is-shiny",
    "href": "pharmads-2024.html#what-is-shiny",
    "title": "Storytelling with Shiny",
    "section": "What is Shiny?",
    "text": "What is Shiny?\n\nShiny Basics\n\nR Shiny is an open source R package that enables easy creation of interactive web applications. It is also available for Python, but the package ecosystem is far less developed.\nPosit (formerly RStudio) created Shiny and continues to lead development.\nNo web development skills required. Shiny generates all the HTML, CSS, and JavaScript for the web app.\nBasic R proficiency is all that is required to use R Shiny.\nShiny has a very active community of developers. There are many, many additional R packages that enhance Shiny.\n\nUse Cases\n\nInteractive data visualization and exploration. Replace a giant PDF of plots with a single app.\nCustomized report generation. Allow users to generate their own reports or tables.\nDeploying R scripts for non-technical users. Make a basic interface that will allow users to interact with your code.\nMake your reports interactive. Shiny can be integrated into RMarkdown/Quarto documents. R/Pharma talk by Max Kuhn on using Shinylive in his new book.\nMake a front-end interface for a large language model.\nEducation tools to explain statistical concepts.\nRStudio IDE gadgets.\n\nLearning Resources\nShiny has been around for 10+ years and there are many learning resources available.\n\nR Shiny Documentation - Includes articles explaining specific topics, as well as a full function reference.\nMastering Shiny book - A book by Hadley Wickham, freely available online, that covers all Shiny features in an approachable manner.\nShiny Cheat Sheet"
  },
  {
    "objectID": "pharmads-2024.html#shiny-architecture",
    "href": "pharmads-2024.html#shiny-architecture",
    "title": "Storytelling with Shiny",
    "section": "Shiny Architecture",
    "text": "Shiny Architecture\n\nTypical Web App Architecture\n\n\n\nStructure of a Shiny App\nTypically a shiny app is written in an R file called app.R. Within app.R there are three components:\n\nA user interface object, typically named ui. This object controls the layout of the app.\nA server function. This function controls the interactive component of the app. It is where your typical R code is executed, such as code that does data transformations and generates visualizations.\nA call to the shiny package function shinyApp(), which takes the ui object and server function as arguments.\n\nHere is a minimal shiny app:\n\n\nCode\nlibrary(shiny)\nui &lt;- fluidPage(\n  \"Hello, world!\"\n)\nserver &lt;- function(input, output, session) {\n}\nshinyApp(ui, server)"
  },
  {
    "objectID": "pharmads-2024.html#examples",
    "href": "pharmads-2024.html#examples",
    "title": "Storytelling with Shiny",
    "section": "Examples",
    "text": "Examples\n\nPosit has many examples in the Shiny Gallery\n\nSingle-file shiny app\nOld Faithful Geyser\nK-means clustering"
  },
  {
    "objectID": "pharmads-2024.html#user-interface",
    "href": "pharmads-2024.html#user-interface",
    "title": "Storytelling with Shiny",
    "section": "User Interface",
    "text": "User Interface\n\nThe UI is mainly composed of inputs and outputs.\nInputs are widgets that get input from the user\n\nOutputs are placeholders that are later filled in by the server function. Each output has a corresponding render function in the server.\n\n\n\nThe user interface is static\nCode in the user interface is only run once. To illustrate this, try inspecting the ui object.\n\n\n\n\n\n\nStructure of a UI object\n\n\n\n\n\n\nlibrary(shiny)\nui &lt;- fluidPage(\n  numericInput('n', 'Number of obs', 100),\n  plotOutput('plot')\n)\n\n\nprint(ui)\n\n&lt;div class=\"container-fluid\"&gt;\n  &lt;div class=\"form-group shiny-input-container\"&gt;\n    &lt;label class=\"control-label\" id=\"n-label\" for=\"n\"&gt;Number of obs&lt;/label&gt;\n    &lt;input id=\"n\" type=\"number\" class=\"shiny-input-number form-control\" value=\"100\"/&gt;\n  &lt;/div&gt;\n  &lt;div class=\"shiny-plot-output html-fill-item\" id=\"plot\" style=\"width:100%;height:400px;\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\nstr(ui)\n\nList of 4\n $ :List of 10\n  ..$ name      : chr \"jquery\"\n  ..$ version   : chr \"3.6.0\"\n  ..$ src       :List of 1\n  .. ..$ file: chr \"www/shared\"\n  ..$ meta      : NULL\n  ..$ script    : chr \"jquery.min.js\"\n  ..$ stylesheet: NULL\n  ..$ head      : NULL\n  ..$ attachment: NULL\n  ..$ package   : chr \"shiny\"\n  ..$ all_files : logi FALSE\n  ..- attr(*, \"class\")= chr \"html_dependency\"\n $ : NULL\n $ : NULL\n $ :List of 1\n  ..$ :List of 3\n  .. ..$ name    : chr \"div\"\n  .. ..$ attribs :List of 1\n  .. .. ..$ class: chr \"container-fluid\"\n  .. ..$ children:List of 2\n  .. .. ..$ :List of 3\n  .. .. .. ..$ name    : chr \"div\"\n  .. .. .. ..$ attribs :List of 1\n  .. .. .. .. ..$ class: chr \"form-group shiny-input-container\"\n  .. .. .. ..$ children:List of 2\n  .. .. .. .. ..$ :List of 3\n  .. .. .. .. .. ..$ name    : chr \"label\"\n  .. .. .. .. .. ..$ attribs :List of 3\n  .. .. .. .. .. .. ..$ class: chr \"control-label\"\n  .. .. .. .. .. .. ..$ id   : chr \"n-label\"\n  .. .. .. .. .. .. ..$ for  : chr \"n\"\n  .. .. .. .. .. ..$ children:List of 1\n  .. .. .. .. .. .. ..$ : chr \"Number of obs\"\n  .. .. .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n  .. .. .. .. ..$ :List of 3\n  .. .. .. .. .. ..$ name    : chr \"input\"\n  .. .. .. .. .. ..$ attribs :List of 4\n  .. .. .. .. .. .. ..$ id   : chr \"n\"\n  .. .. .. .. .. .. ..$ type : chr \"number\"\n  .. .. .. .. .. .. ..$ class: chr \"shiny-input-number form-control\"\n  .. .. .. .. .. .. ..$ value: chr \"100\"\n  .. .. .. .. .. ..$ children: list()\n  .. .. .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n  .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n  .. .. ..$ :List of 3\n  .. .. .. ..$ name    : chr \"div\"\n  .. .. .. ..$ attribs :List of 4\n  .. .. .. .. ..$ id   : chr \"plot\"\n  .. .. .. .. ..$ class: chr \"shiny-plot-output\"\n  .. .. .. .. ..$ style: chr \"width:100%;height:400px;\"\n  .. .. .. .. ..$ class: chr \"html-fill-item\"\n  .. .. .. ..$ children: list()\n  .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n  .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n - attr(*, \"class\")= chr [1:2] \"shiny.tag.list\" \"list\"\n - attr(*, \"html_dependencies\")=List of 1\n  ..$ :function ()  \n  .. ..- attr(*, \"class\")= chr \"shiny.tag.function\"\n\n\n\n\n\n\n\nBootstrap\nBootstrap is a frontend web framework that Shiny utilizes when it generates the HTML/CSS/JS from the ui object. Web frameworks like Bootstrap exist so that web developers don’t reinvent the wheel each time they create a new project. You don’t need to know anything about Bootstrap to create a Shiny app, but can be helpful if you are a user interface perfectionist."
  },
  {
    "objectID": "pharmads-2024.html#server-and-reactivity",
    "href": "pharmads-2024.html#server-and-reactivity",
    "title": "Storytelling with Shiny",
    "section": "Server and Reactivity",
    "text": "Server and Reactivity"
  },
  {
    "objectID": "pharmads-2024.html#deployment",
    "href": "pharmads-2024.html#deployment",
    "title": "Storytelling with Shiny",
    "section": "Deployment",
    "text": "Deployment\n\n\nShiny Server\nShiny Server is open source web server software. A single server running Shiny Server can host many shiny apps.\n\nShinyapps.io is a managed service that runs Shiny Server for you. It’s the easiest way to get started deploying Shiny apps. Deploying is fast and simple through the RStudio IDE. It’s free for 25 hours of hosting per month and paid tiers allow additional hours.\nHost Shiny Server on your own server. This will take some IT support or knowledge, but many guides exist or deploying Shiny Server yourself.\n\n\n\nShinylive\nShinylive uses WebR to run a shiny app in the browser. There is no backend server required.\n\nThe technology is still early and many packages don’t work.\nNo server involved. Doesn’t work with large data sets.\nThe R code is run in the browser and therefore the user has access to the entire app’s source code and data.\n\nTwo ways to use shinylive:\n\nCreate your app on shinylive.io and use the “Share” button to generate a link to it. All of your app’s code and other assets will be compressed to a string and contained in the generated link. Then simply send this link to a user. This is the easiest way to share a Shiny app but it’s limited to small apps.\nUse the shinylive R package to create and host your own static website. This is easy to do in combination with the shinylive quarto extension."
  }
]